<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kosmo.transaction" />
	
	<!-- 트랜잭션 처리를 위한 빈 생성 -->
	<!-- 1. DB연결정보 -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"  value="jdbc:oracle:thin:@localhost:1521:xe" />
		<beans:property name="username" value="kosmo" />
		<beans:property name="password" value="1234" />	
	</beans:bean>
	<!-- 2. JDBCTemplate 타입의 빈 생성(Spring-JDBC 사용) -->
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" /> <!-- 데이터소스를 참조함 -->
	</beans:bean>
	<!-- 3. 트랜잭션 매니져 빈 생성 -->
	<beans:bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" /> <!-- 데이터소스를 참조함 -->
	</beans:bean> 
	<!-- 
		4. 앞에서 생성한 template, transactionManager빈을 참조해서
		최종적으로 transactionDAO빈을 생성한다. 우리는 해당 객체를
		통해 트랜잭션 처리를 하게된다.    
	-->
	<beans:bean name="transactionDAO" class="transaction.TicketDAO">
		<beans:property name="template" ref="template" />
		<beans:property name="transactionManager" ref="transactionManager" />
	</beans:bean>
	
	
</beans:beans>
